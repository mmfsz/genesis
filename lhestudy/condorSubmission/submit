#!/bin/bash

CARDDIR=""
GRIDPACKPATH=""
TAG=""
MEM_KB=10 #2048
N_CPUS=1 #4 #12
SCRAM=slc7_amd64_gcc700
CMSSW=CMSSW_10_6_0

function print_help {
cat << EOF
usage: submit [-h] -c CARDS [-t TAG] [-m MEM_KB] [-n N_CPUS] [--cmssw CMSSW] [--scram SCRAM]
              [T2_SITE1 T2_SITE2 ...]

Submit condor jobs for producing a gridpack

required arguments:
  -c CARDS, --cards CARDS       directory containing MadGraph cards
  -g GRIPACKPATH                absolute path to gridpack tarball.tar.xz
optional arguments:
  -h, --help                    show this help message and exit
  -t TAG, --tag TAG             unique tag for identifying the output directory tasks/$PROCESS_$TAG (default: None)
  -m MEM_KB, --mem_kb MEM_KB    amount of memory to request in kilobytes (KB) (default: $MEM_KB)
  -n N_CPUS, --n_cpus N_CPUS    number of CPUs to request for gridpack generation (default: $N_CPUS)
  --cmssw CMSSW                 CMSSW version to use (default: $CMSSW)
  --scram SCRAM                 SCRAM architecture to use (default: $SCRAM)

trailing arguments:
  T2_SITE1 T2_SITE2 ...         space-separated list of sites to submit job to (default: T2_US_Purdue)
EOF
exit 0
}

# Read the CLI options
TEMP=`getopt -o hcg:t: --long help,gp:,cards:,tag:,mem_kb:,n_cpus:,cmssw:,scram: -- "$@"`
echo $TEMP
eval set -- "$TEMP"
# Extract options and their arguments
while true; do
    case "$1" in        
        -h|--help)
            print_help; shift 1;;  
        -g|--gp)
            GRIDPACKPATH=$2; shift 2;;     
        -c|--cards)
            CARDDIR=$2; shift 2;;
        -t|--tag)
            TAG=$2; shift 2;;
        -m|--mem_kb)
            MEM_KB=$2; shift 2;;
        -n|--n_cpus)
            N_CPUS=$2; shift 2;;
        --cmssw)
            CMSSW=$2; shift 2;;
        --scram)
            SCRAM=$2; shift 2;;        
        --) shift; break;;
        *) echo "Internal error!"; exit 1;;
    esac
done
SITES=$@

echo $GRIDPACKPATH

if [[ "$SITES" == "" ]]; then
    SITES="T2_US_UCSD" #"T2_US_Purdue"
fi

if [[ "$GRIDPACKPATH" == "" ]]; then
    echo "ERROR: no gridpack file provided"
    print_help
    exit 1
elif [[ ! -f $GRIDPACKPATH ]]; then
    echo "ERROR: file $GRIDPACKPATH does not exist"
    exit 1
fi

# Get process name from gridpack file name
PROCESS=$(basename $GRIDPACKPATH)
PROCESS=${PROCESS%_slc*}
echo "Process: " $PROCESS
TASKDIR=$PWD/tasks/$PROCESS

echo "TASKDIR: " $TASKDIR
if [[ "$TAG" != "" ]]; then
    TASKDIR=${TASKDIR}_$TAG
fi

if [[ -d $TASKDIR ]]; then
    echo "ERROR: $TASKDIR already exists; move or delete it and run again"
    exit 1
fi

# Create condor submit and output directory
mkdir -p $TASKDIR


# Make package
MGPATH=/home/users/mmazza/backup/projects/genesis/madgraph
CARDSDIR=$MGPATH/cards/$PROCESS
echo "Creating tarball for $PROCESS"
mkdir -p workdir
#cp $MGPATH/bin/test_gridpack workdir/test_gridpack.sh
cp $MGPATH/runcms*.sh workdir/
cp -R $MGPATH/metadata workdir/
cp -R $MGPATH/models workdir/
cp -R $MGPATH/patches workdir/
cp -R $MGPATH/utilities workdir/
mkdir -p workdir/cards
cp -R $CARDSDIR workdir/cards/
ls workdir/



# Create tarball of workdir with Madgraph stuff  
tar -zcf $TASKDIR/${PROCESS}.tar.gz workdir
echo "ls $TASKDIR"
ls $TASKDIR

if [[ ! -f $TASKDIR/${PROCESS}.tar.gz ]]; then
    echo "ERROR: failed to create tarball"
    exit 1
fi

rm -rf workdir


cp $PWD/condor_executable $TASKDIR/condor_executable

cat << EOF > $TASKDIR/submit.cmd
universe                = Vanilla
Requirements            = ((HAS_SINGULARITY=?=True)&&(Machine =!= LastRemoteHost))
RequestMemory           = $MEM_KB
RequestCpus             = $N_CPUS
executable              = $TASKDIR/condor_executable
arguments               = $USER $CMSSW $SCRAM
transfer_executable     = True
transfer_input_files    = $GRIDPACKPATH
on_exit_remove          = (ExitBySignal == False) && (ExitCode == 0)
max_retries             = 3
#$TASKDIR/${PROCESS}.tar.gz, 
transfer_output_files   = ""
log                     = $TASKDIR/condor.log
output                  = $TASKDIR/1e.\$(Cluster).\$(Process).stdout
error                   = $TASKDIR/1e.\$(Cluster).\$(Process).stderr
notification            = Never
should_transfer_files   = YES
when_to_transfer_output = ON_EXIT
x509userproxy           = /tmp/x509up_u$(id -u)
use_x509userproxy       = True
+DESIRED_Sites          = "$SITES"
+JobBatchName           = "$PROCESS"
+project_Name           = "cmssurfandturf"
+tag                    = "$TAG"

queue
EOF

echo "Condor job files written to $TASKDIR"

condor_submit $TASKDIR/submit.cmd
